#include <SPI.h>
#include <Ethernet.h>
#include <SD.h>
#include <FastLED.h>
#include <TMRpcm.h>

#define NUM_LEDS 30
#define DATA_PIN 6
CRGB leds[NUM_LEDS];

TMRpcm audio;
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 0, 177);

const int buttonPins[] = {A0, A1, A4, A5, 8, 9};  // Pins des boutons
EthernetServer server(80);
bool gameActive = false;
unsigned long startTime;
int scores[6] = {0};
int remainingTime = 60;
int gameMode = 1;

void setup() {
    Serial.begin(9600);
    Ethernet.begin(mac, ip);
    server.begin();
    SD.begin(4);
    FastLED.addLeds<WS2812B, DATA_PIN, GRB>(leds, NUM_LEDS);
    audio.speakerPin = 9;

    for (uint8_t i = 0; i < 6; i++) pinMode(buttonPins[i], INPUT_PULLUP);
}

void loop() {
    EthernetClient client = server.available();
    if (client) handleClient(client);

    if (gameActive) {
        updateGame();
        checkButtons();
    }
}

void handleClient(EthernetClient client) {
    String request = client.readStringUntil('\r');

    if (request.indexOf(F("GET /mode1")) != -1) {
        startGame(1);
        redirectClient(client, F("/game"));
    } 
    else if (request.indexOf(F("GET /mode2")) != -1) {
        startGame(2);
        redirectClient(client, F("/equipe"));
    }
    else if (request.indexOf(F("GET /scores")) != -1) {
        sendScores(client);
    }
    else if (request.indexOf(F("GET /equipe")) != -1) {
        sendFile(client, F("Equipe.htm"));
    }
    else {
        sendFile(client, gameActive ? F("Game.htm") : F("Accueil.htm"));
    }
    client.stop();
}

// Fonction pour rediriger vers une autre page
void redirectClient(EthernetClient client, const __FlashStringHelper* location) {
    client.println(F("HTTP/1.1 303 See Other"));
    client.print(F("Location: "));
    client.println(location);
    client.println();
}

void startGame(int mode) {
    gameActive = true;
    startTime = millis();
    remainingTime = 60;
    gameMode = mode;
    memset(scores, 0, sizeof(scores));

    audio.play("music.mp3");
}

void updateGame() {
    unsigned long elapsed = (millis() - startTime) / 1000;
    if (elapsed >= 60) endGame();
    else remainingTime = 60 - elapsed;
}

void checkButtons() {
    for (uint8_t i = 0; i < 6; i++) {
        if (digitalRead(buttonPins[i]) == LOW) scores[i]++;
    }
}

void sendFile(EthernetClient client, const __FlashStringHelper* filename) {
    File file = SD.open((const char*) filename);
    if (file) {
        client.println(F("HTTP/1.1 200 OK"));
        client.println(F("Content-Type: text/html"));
        client.println();
        while (file.available()) client.write(file.read());
        file.close();
    } else {
        client.println(F("HTTP/1.1 404 Not Found"));
        client.println(F("<h1>404 - Fichier non trouvé</h1>"));
    }
}

void sendScores(EthernetClient client) {
    client.println(F("HTTP/1.1 200 OK"));
    client.println(F("Content-Type: text/plain"));
    client.println();
    
    client.print(F("TIME:"));
    client.println(remainingTime);
    
    int team1Score = scores[0] + scores[1] + scores[2];
    int team2Score = scores[3] + scores[4] + scores[5];

    for (uint8_t i = 0; i < 6; i++) {
        client.print(F("Joueur "));
        client.print(i + 1);
        client.print(F(": "));
        client.println(scores[i]);
    }

    if (gameMode == 2) { // Mode équipe
        client.print(F("ÉQUIPE 1:"));
        client.println(team1Score);
        client.print(F("ÉQUIPE 2:"));
        client.println(team2Score);
    }
}

void endGame() {
    gameActive = false;
    audio.stopPlayback();
    FastLED.clear();
    FastLED.show();
}
