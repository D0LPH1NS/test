#include <SPI.h>
#include <Ethernet.h>
#include <SD.h>
#include <FastLED.h>

#define NUM_LEDS 30
#define DATA_PIN 6
#define BUZZER_PIN 5
CRGB leds[NUM_LEDS];

byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192, 168, 0, 177);

const int buttonPins[6] = {A0, A1, A4, A5, 8, 9};
const CRGB playerColors[6] = {
  CRGB::Green,  // Joueur 1 - Gain
  CRGB::Blue,   // Joueur 2 - Gain
  CRGB::Purple, // Joueur 3 - Gain
  CRGB::Red,    // Joueur 4 - Perte
  CRGB::Orange, // Joueur 5 - Perte
  CRGB::Yellow  // Joueur 6 - Perte
};

EthernetServer server(80);
bool gameActive = false;
unsigned long startTime;
unsigned long lastColorChange = 0;
int scores[6] = {0};
int remainingTime = 60; // Chronomètre de 60 secondes
int tempo = 150;
int melody[] = {262, 294, 330, 349, 392, 440, 494, 523};
int noteIndex = 0;

void setup() {
  Serial.begin(9600);
  Ethernet.begin(mac, ip);
  server.begin();
  SD.begin(4);
  FastLED.addLeds<WS2812B, DATA_PIN, GRB>(leds, NUM_LEDS);
  
  for(int i = 0; i < 6; i++) {
    pinMode(buttonPins[i], INPUT_PULLUP);
  }
  pinMode(BUZZER_PIN, OUTPUT);
  
  initLEDs();
}

void loop() {
  EthernetClient client = server.available();
  if(client) handleClient(client);
  
  if(gameActive) {
    updateGame();
    checkButtons();
    playMelody();
    changeLEDColors();
  }
}

void handleClient(EthernetClient client) {
  String request = client.readStringUntil('\r');
  
  if(request.indexOf("GET /start") != -1) {
    startGame();
    sendFile(client, "Game.htm");  // Redirige vers la page de jeu
  }
  else if(request.indexOf("GET /game") != -1) {
    sendFile(client, "Game.htm");
  }
  else if(request.indexOf("GET /scores") != -1) {
    sendScores(client);
  }
  else {
    sendFile(client, "Accueil.htm");
  }
  
  delay(1);
  client.stop();
}

void startGame() {
  gameActive = true;
  startTime = millis();
  remainingTime = 60;
  memset(scores, 0, sizeof(scores));
  initLEDs();
  FastLED.show();
}

void updateGame() {
  unsigned long elapsed = millis() - startTime;
  
  // Met à jour le temps restant
  remainingTime = 60 - (elapsed / 1000);
  
  // Accélère la musique à 15 secondes restantes
  if(remainingTime <= 15) {
    tempo = 75;
  }
  
  // Termine le jeu si le temps est écoulé
  if(remainingTime <= 0) {
    endGame();
  }
}

void checkButtons() {
  for(int i = 0; i < 6; i++) {
    // Vérifie si le bouton est pressé (LOW car les boutons sont en INPUT_PULLUP)
    if(digitalRead(buttonPins[i]) == LOW) {
      // Si le bouton est pressé, met à jour le score
      if(i < 3) {
        scores[i]++; // Gain de points pour les joueurs 1 à 3
      } else {
        scores[i]--; // Perte de points pour les joueurs 4 à 6
      }
      delay(50); // Anti-rebond
    }
  }
}

void playMelody() {
  static unsigned long lastNote = 0;
  
  if(millis() - lastNote > tempo) {
    tone(BUZZER_PIN, melody[noteIndex], tempo / 2);
    noteIndex = (noteIndex + 1) % 8;
    lastNote = millis();
  }
}

void changeLEDColors() {
  if(millis() - lastColorChange >= 500) { // Change les couleurs toutes les 500 ms
    for(int i = 0; i < NUM_LEDS; i++) {
      leds[i] = playerColors[random(6)]; // Choisit une couleur aléatoire parmi les 6
    }
    FastLED.show();
    lastColorChange = millis();
  }
}

void sendFile(EthernetClient client, String filename) {
  File file = SD.open(filename);
  
  if (file) {
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println();
    
    while(file.available()) {
      client.write(file.read());
    }
    file.close();
  } else {
    client.println("HTTP/1.1 404 Not Found");
    client.println("Content-Type: text/html");
    client.println();
    client.println("<h1>404 - File Not Found</h1>");
  }
}

void sendScores(EthernetClient client) {
  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/plain");
  client.println();
  
  // Envoie le temps restant
  client.print("TIME:");
  client.println(remainingTime);
  
  // Envoie les scores des joueurs
  for(int i = 0; i < 6; i++) {
    client.print("Joueur ");
    client.print(i + 1);
    client.print(": ");
    client.println(scores[i]);
  }
  
  // Envoie le gagnant si le jeu est terminé
  if(!gameActive) {
    int winner = 0;
    for(int i = 1; i < 6; i++) {
      if(scores[i] > scores[winner]) winner = i;
    }
    client.print("WINNER:");
    client.print(winner + 1);
  }
}

void initLEDs() {
  for(int i = 0; i < 6; i++) {
    for(int j = 0; j < 4; j++) {
      leds[i * 4 + j] = playerColors[i];
    }
  }
  FastLED.show();
}

void endGame() {
  gameActive = false;
  noTone(BUZZER_PIN);
  FastLED.clear();
  FastLED.show();
}

void resetGame() {
  gameActive = false;
  initLEDs();
}